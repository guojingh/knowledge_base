package main

/*
给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。

例如，121 是回文，而 123 不是。

示例 1：
输入：x = 121
输出：true

示例 2：
输入：x = -121
输出：false
解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。

示例 3：
输入：x = 10
输出：false
解释：从右向左读, 为 01 。因此它不是一个回文数。
*/

func isPalindrome(x int) bool {

	//思想：
	//1.负数或者个位为0的数肯定不是回文数并且其本身非0，因为0肯定是回文数
	//2.如 1221 --> r=0*10+1221%10=1 x=x/10--> r=1*10+122%10 x=122/10 | if最后 r == x 就说明其是回文数
	if x < 0 || (x%10 == 0 && x != 0) {
		return false
	}

	//存放反转后的后面几位数
	re := 0
	for re < x {
		//计算反转后的数字
		re = re*10 + x%10
		//计算未翻转的数字，相当于将 x 拆成了两半
		x = x / 10
	}

	//1.如果 x == re 即拆成两半的数据相等，就是回文数
	//2.如果是奇数位数，那么 re/10 表示其舍去中间的位数，也可以可 re 相等，那么也是回文数，因为中间位的数字并不影响其是否是回文数
	return re == x || x == re/10

}

func main() {

}
